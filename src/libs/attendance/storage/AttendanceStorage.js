/* eslint-disable no-unused-vars */
export default class AttendanceStorage {
  /**
   * @param {object|null} schema An object with optional parse functions:
   *   { create?: (rec)=>rec, patch?: (patch)=>patch, read?: (rec)=>rec }
   * Use Zod/Joi/your lib and pass parser functions here.
   * Example in schema file:
      import { z } from "zod";

      const base = {
        id: z.string().uuid().optional(), // generated by storage
        userId: z.string().min(1),
        date: z.string().regex(/^\d{4}-\d{2}-\d{2}$/), // YYYY-MM-DD
        status: z.enum(["present", "absent", "late", "leave"]),
        notes: z.string().max(500).optional(),
        createdAt: z.string().datetime().optional(),
        updatedAt: z.string().datetime().optional(),
      };

      export const AttendanceCreateSchema = z.object({
        userId: base.userId,
        date: base.date,
        status: base.status,
        notes: base.notes,
      });

      export const schemaParsers = {
        create: (rec) => AttendanceCreateSchema.parse(rec),
      };
   */
  constructor(schema = null) {
    if (new.target === AttendanceStorage) {
      throw new Error('Cannot instantiate abstract class directly');
    }
    this.schema = schema;
  }

  _validateOnCreate(record) {
    if (!this.schema?.create) return record;
    return this.schema.create(record); // should throw on invalid
  }
  _validateOnPatch(patch) {
    if (!this.schema?.patch) return patch;
    return this.schema.patch(patch);
  }
  _validateOnRead(record) {
    if (!this.schema?.read) return record;
    return this.schema.read(record);
  }

  /** Creates and returns the created record (with id). */
  async create(record) {
    throw new Error('Method "create" not implemented');
  }

  /** Partially updates by id; returns the updated record. */
  async update(id, patch) {
    throw new Error('Method "update" not implemented');
  }

  /** Deletes by id; returns boolean. */
  async delete(id) {
    throw new Error('Method "delete" not implemented');
  }

  /** Returns record or null. */
  async findById(id) {
    throw new Error('Method "findById" not implemented');
  }

  /**
   * Returns { items, total } with optional filtering/pagination
   * @param {object} [filter] domain-specific (e.g., by userId/date/status)
   * @param {object} [options] { limit, offset, sort: { field, dir: "asc"|"desc" } }
   */
  async findAll(filter = {}, options = {}) {
    throw new Error('Method "findAll" not implemented');
  }
}
